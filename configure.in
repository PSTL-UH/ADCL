dnl Process this file with autoconf to produce a configure script.
AC_INIT
AC_PREREQ(2.53)
AC_CONFIG_HEADER(include/lat_sys.h)
dnl First step for the cross compiling ...
AC_CANONICAL_TARGET
AC_PREFIX_DEFAULT(.)

dnl 
dnl The idea behind that it's to have a way to load architecture specific
dnl files, to be able to compile for all architectures with the same
dnl sources. In same time it could be usefull to have specific flags
dnl and compilers settings for all of them.
dnl 

AC_PROG_CC
AC_PROG_CXX
AC_PROG_F77
#AC_F77_LIBRARY_LDFLAGS

dnl Check whether make sets the variable MAKE
#AC_PROG_MAKE_SET

dnl Check whether system supports "ln -s" and set env-var LN_S
#AC_PROG_LN_S

AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(F77)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(FFLAGS)


dnl ==================================================
dnl Now ask the user 'bout desired options...

dnl ==================================================
AC_MSG_CHECKING(for LATENCY main directory)
AC_ARG_WITH(lat_dir,
 [  --with-lat-dir=LATDIR             Main LATENCY directory (default=$PWD)],
    lat_dir="${withval}", lat_dir="")
    if test "x$lat_dir" = "x" ; then 
       lat_dir=$PWD
    fi
    AC_MSG_RESULT(${lat_dir})
    AC_SUBST(lat_dir)
dnl ==================================================	


dnl ==================================================
AC_MSG_CHECKING(for MPI install directory)
AC_ARG_WITH(mpi_dir,
 [  --with-mpi-dir=MPIDIR             Installation directory of MPI],
    mpi_dir="${withval}", mpi_dir="/usr/local/mpi/")
    AC_MSG_RESULT(${mpi_dir})
    AC_SUBST(mpi_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI include directory)
AC_ARG_WITH(mpi_inc_dir,
 [  --with-mpi-inc-dir=dir            Include directory of MPI (default=MPI_DIR/include)],
    mpi_inc_dir="${withval}", mpi_inc_dir="")
    if test "x$mpi_inc_dir" = "x" ; then
      mpi_inc_dir=${mpi_dir}/include
    fi
    AC_MSG_RESULT(${mpi_inc_dir})
    AC_SUBST(mpi_inc_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI lib directory)
AC_ARG_WITH(mpi_lib_dir,
 [  --with-mpi-lib-dir=dir            Library directory of MPI (default=MPI_DIR/lib)],
    mpi_lib_dir="${withval}", mpi_lib_dir="")
    if test "x$mpi_lib_dir" = "x" ; then
      mpi_lib_dir=${mpi_dir}/lib
    fi
    AC_MSG_RESULT(${mpi_lib_dir})
    AC_SUBST(mpi_lib_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI binary directory)
AC_ARG_WITH(mpi_bin_dir,
 [  --with-mpi-bin-dir=dir            Bin directory of MPI (default=MPI_DIR/bin) ],
    mpi_bin_dir="${withval}", mpi_bin_dir="")
    if test "x$mpi_bin_dir" = "x" ; then
      mpi_bin_dir=${mpi_dir}/bin
    fi
    AC_MSG_RESULT(${mpi_bin_dir})
    AC_SUBST(mpi_bin_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI C compiler wrapper)
AC_ARG_WITH(mpi_cc,
 [  --with-mpi-cc=mpicc               MPI C compiler wrapper (default=mpicc) ],
    mpi_cc="${withval}", mpi_cc="mpicc")
    AC_MSG_RESULT(${mpi_cc})
    AC_SUBST(mpi_cc)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI Fortran 77 compiler wrapper)
AC_ARG_WITH(mpi_f77,
 [  --with-mpi-f77=mpif77             MPI f77 compiler wrapper (default=mpif77) ],
    mpi_f77="${withval}", mpi_f77="mpif77")
    AC_MSG_RESULT(${mpi_f77})
    AC_SUBST(mpi_f77)
dnl ==================================================	

dnl ==================================================
dnl Try to compile a trivial C MPI application
AC_MSG_CHECKING(if we can compile and link a simple MPI program with ${mpi_cc})
cat > testmpi.c <<EOF
#include "mpi.h"

int main (int argc, char *argv[])
{
    MPI_Init (&argc, &argv);
    MPI_Finalize();
}
EOF

$mpi_cc -o testmpi testmpi.c > /dev/null 2>&1
if test ! -s testmpi ; then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([cannot compile and link a simple MPI program with ${mpi_cc}])
else
   AC_MSG_RESULT(yes)
fi
/bin/rm -f testmpi.c testmpi testmpi.o
dnl ==================================================

dnl ==================================================
AC_ARG_ENABLE(mpiio,
[  --enable-mpiio                using MPI I/O for writing output files (default=no)],
[test "$enableval" = yes && LAT_USE_MPIIO=yes])
test "$LAT_USE_MPIIO" = yes || LAT_USE_MPIIO=no

AC_MSG_CHECKING([whether to use MPI I/O for writing output files])
AC_MSG_RESULT(${LAT_USE_MPIIO})
if test "$LAT_USE_MPIIO" = yes ; then
  AC_DEFINE(USE_MPIIO)
fi
dnl ==================================================

dnl ==================================================
AC_ARG_ENABLE(use_allocmem,
[  --enable-mpi-allocmem         using MPI_Alloc_mem for allocating buffers (default=no)],
[test "$enableval" = yes && LAT_USE_MPI_ALLOCMEM=yes])
test "$LAT_USE_MPI_ALLOCMEM" = yes || LAT_USE_MPI_ALLOCMEM=no

AC_MSG_CHECKING([whether to use MPI_Alloc_mem for allocating buffers])
AC_MSG_RESULT(${LAT_USE_MPI_ALLOCMEM})
if test "$LAT_USE_MPI_ALLOCMEM" = yes ; then
  AC_DEFINE(USE_MPI_ALLOC_MEM)
fi
dnl ==================================================

dnl ==================================================
AC_ARG_ENABLE(use_nameservice,
[  --enable-use-nameservice      using MPI Nameservice for connect/accept (default=yes)],
[test "$enableval" = no && LAT_USE_MPI_NAMESERVICE=no])
test "$LAT_USE_MPI_NAMESERVICE" = no || LAT_USE_MPI_NAMESERVICE=yes

AC_MSG_CHECKING([whether to use MPI name service for connect/accept])
AC_MSG_RESULT(${LAT_USE_MPI_NAMESERVICE})
if test "$LAT_USE_MPI_NAMESERVICE" = yes ; then
  AC_DEFINE(USE_NAMESERVICE)
fi
dnl ==================================================

dnl ==================================================
AC_ARG_ENABLE(dyncomm_timing,
[  --enable-dyncomm-timing       print time to establishe dynamic communicators (default=no)],
[test "$enableval" = yes && LAT_DYN_TIMING=yes])
test "$LAT_DYN_TIMING" = yes || LAT_DYN_TIMING=no

AC_MSG_CHECKING([whether to print time to establish dynamic communicators])
AC_MSG_RESULT(${LAT_DYN_TIMING})
if test "$LAT_DYN_TIMING" = yes ; then
  AC_DEFINE(DYNCOMM_TIMING)
fi
dnl ==================================================


##
## Configuring the communication parameters
##
dnl ==================================================
AC_MSG_CHECKING(for number of measurements per short message)
AC_ARG_WITH(num_tests,
 [  --with-num-tests=NUMTESTS         Number of measurements per short msg. (default=10)],
    num_tests="${withval}", num_tests="10")
    AC_MSG_RESULT(${num_tests})
    AC_SUBST(num_tests)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for number of measurements per long message)
AC_ARG_WITH(num_long_tests,
 [  --with-num-long-tests=NUMTESTS    Number of measurements per long msg. (default=10)],
    num_long_tests="${withval}", num_long_tests="10")
    AC_MSG_RESULT(${num_long_tests})
    AC_SUBST(num_long_tests)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for number of tests per measurements for short message)
AC_ARG_WITH(band_tests,
 [  --with-band-tests=NUMTESTS        Number of tests per measurements for short msg. (default=20)],
    band_tests="${withval}", band_tests="20")
    AC_MSG_RESULT(${band_tests})
    AC_SUBST(band_tests)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for number of tests per measurements for long message)
AC_ARG_WITH(band_long_tests,
 [  --with-band-long-tests=NUMTESTS   Number of tests per measurements for long msg. (default=10)],
    band_long_tests="${withval}", band_long_tests="10")
    AC_MSG_RESULT(${band_long_tests})
    AC_SUBST(band_long_tests)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for number of tests for latency measurements)
AC_ARG_WITH(lat_tests,
 [  --with-lat-tests=NUMTESTS         Number of tests for latency measurements (default=20)],
    lat_tests="${withval}", lat_tests="20")
    AC_MSG_RESULT(${lat_tests})
    AC_SUBST(lat_tests)
dnl ==================================================	


dnl ==================================================
AC_MSG_CHECKING(for maximum short message length)
AC_ARG_WITH(max_short_len,
 [  --with-max-short-len=LENGTH       Maximum short msg. length (default=65537)],
    max_short_len="${withval}", max_short_len="65537")
    AC_MSG_RESULT(${max_short_len})
    AC_SUBST(max_short_len)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for maximum message length)
AC_ARG_WITH(max_len,
 [  --with-max-len=LENGTH             Maximum  msg. length (default=2MB)],
    max_len="${withval}", max_len="2*1024*1024")
    AC_MSG_RESULT(${max_len})
    AC_SUBST(max_len)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for message step for large messages)
AC_ARG_WITH(b,
 [  --with-large-step=LENGTH          Message step for large messages (default=65536)],
    large_step="${withval}", large_step="65536")
    AC_MSG_RESULT(${large_step})
    AC_SUBST(large_step)
dnl ==================================================	


dnl ==================================================
AC_MSG_CHECKING(for number of measurements per short message in file tests)
AC_ARG_WITH(num_file_tests,
 [  --with-num-file-tests=NUMTESTS    Number of measurements per short msg. for file tests (default=10)],
    num_file_tests="${withval}", num_file_tests="10")
    AC_MSG_RESULT(${num_file_tests})
    AC_SUBST(num_file_tests)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for number of measurements per long message in file tests)
AC_ARG_WITH(num_file_long_tests,
 [  --with-num-file-long-tests=NUMTESTS  Number of measurements per long msg. for file tests (default=10)],
    num_file_long_tests="${withval}", num_file_long_tests="10")
    AC_MSG_RESULT(${num_file_long_tests})
    AC_SUBST(num_file_long_tests)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for number of tests per measurements for short message in file tests)
AC_ARG_WITH(band_file_tests,
 [  --with-band-file-tests=NUMTESTS  Number of tests per measurements for short msg. for file tests (default=10)],
    band_file_tests="${withval}", band_file_tests="10")
    AC_MSG_RESULT(${band_file_tests})
    AC_SUBST(band_file_tests)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for number of tests per measurements for long messages in file tests)
AC_ARG_WITH(band_file_long_tests,
 [  --with-band-file-long-tests=NUMTESTS   Number of tests per measurements for long msg. in file tests(default=5)],
    band_file_long_tests="${withval}", band_file_long_tests="5")
    AC_MSG_RESULT(${band_file_long_tests})
    AC_SUBST(band_file_long_tests)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for message step for large messages in file tests)
AC_ARG_WITH(b,
 [  --with-file-large-step=LENGTH    Message step for large messages in file tests (default=65536)],
    file_large_step="${withval}", file_large_step="65536")
    AC_MSG_RESULT(${file_large_step})
    AC_SUBST(file_large_step)
dnl ==================================================	

dnl Checks for header files.
#AC_HEADER_STDC
#AC_CHECK_HEADERS(limits.h malloc.h sys/time.h unistd.h sys/types.h)
#AC_CHECK_FUNCS(strdup strerror strstr strtol strlcat strlcpy)

dnl Checks for typedefs, structures, and compiler characteristics.
#AC_C_CONST
#AC_TYPE_PID_T
#AC_TYPE_SIZE_T

dnl Checks for library functions.
#AC_FUNC_MEMCMP
#AC_CHECK_FUNCS(gethostname strerror strstr setlinebuf strcasecmp snprintf)

AC_OUTPUT(Makefile.defs include/latconfig.h) 
