dnl Process this file with autoconf to produce a configure script.
AC_INIT
AC_PREREQ(2.53)
AC_CONFIG_HEADER(include/ADCL_config.h)
dnl First step for the cross compiling ...
AC_CANONICAL_TARGET
AC_PREFIX_DEFAULT(.)

dnl 
dnl The idea behind that it's to have a way to load architecture specific
dnl files, to be able to compile for all architectures with the same
dnl sources. In same time it could be usefull to have specific flags
dnl and compilers settings for all of them.
dnl 

AC_PROG_CC
AC_PROG_CXX
AC_PROG_F77
#AC_F77_LIBRARY_LDFLAGS

dnl Check whether make sets the variable MAKE
#AC_PROG_MAKE_SET

dnl Check whether system supports "ln -s" and set env-var LN_S
#AC_PROG_LN_S

AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(F77)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(FFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(FLDFLAGS)

dnl ==================================================
dnl Now ask the user 'bout desired options...

dnl ==================================================
AC_MSG_CHECKING(for ADCL main directory)
AC_ARG_WITH(adcl_dir,
 [  --with-adcl-dir=ADCLDIR           Main ADCL directory (default=$PWD)],
    adcl_dir="${withval}", adcl_dir="")
    if test "x$adcl_dir" = "x" ; then 
       adcl_dir=$PWD
    fi
    AC_MSG_RESULT(${adcl_dir})
    AC_SUBST(adcl_dir)
dnl ==================================================	
dnl ==================================================
AC_MSG_CHECKING(for ADCL include directory)
AC_ARG_WITH(adcl_inc_dir,
 [  --with-adcl-inc-dir=ADCLDIR       ADCL include directory (default=ADCL_DIR/include)],
    adcl_inc_dir="${withval}", adcl_inc_dir="")
    if test "x$adcl_inc_dir" = "x" ; then 
       adcl_inc_dir=${adcl_dir}/include
    fi
    AC_MSG_RESULT(${adcl_inc_dir})
    AC_SUBST(adcl_inc_dir)
dnl ==================================================	
dnl ==================================================
AC_MSG_CHECKING(for ADCL lib directory)
AC_ARG_WITH(adcl_lib_dir,
 [  --with-adcl-lib-dir=dir           ADCL lib directory (default=ADCL_DIR/lib)],
    adcl_lib_dir="${withval}", adcl_lib_dir="")
    if test "x$adcl_lib_dir" = "x" ; then 
       adcl_lib_dir=${adcl_dir}/lib
    fi
    AC_MSG_RESULT(${adcl_lib_dir})
    AC_SUBST(adcl_lib_dir)
dnl ==================================================	
dnl ==================================================
AC_MSG_CHECKING(for ADCL binary directory)
AC_ARG_WITH(adcl_bin_dir,
 [  --with-adcl-bin-dir=dir           ADCL bin directory (default=ADCL_DIR/bin)],
    adcl_bin_dir="${withval}", adcl_bin_dir="")
    if test "x$adcl_bin_dir" = "x" ; then 
       adcl_bin_dir=${adcl_dir}/bin
    fi
    AC_MSG_RESULT(${adcl_bin_dir})
    AC_SUBST(adcl_bin_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for name of the ADCL library)
AC_ARG_WITH(adcl_lib_name,
 [  --with-adcl-lib-name=name         name of the ADCL library (default=libadcl.a)],
    adcl_lib_name="${withval}", adcl_lib_name="")
    if test "x$adcl_lib_name" = "x" ; then 
       adcl_lib_name=libadcl.a
    fi
    AC_MSG_RESULT(${adcl_lib_name})
    AC_SUBST(adcl_lib_name)
dnl ==================================================	


dnl ==================================================
AC_MSG_CHECKING(for MPI install directory)
AC_ARG_WITH(mpi_dir,
 [  --with-mpi-dir=MPIDIR             Installation directory of MPI],
    mpi_dir="${withval}", mpi_dir="/usr/local/mpi/")
    AC_MSG_RESULT(${mpi_dir})
    AC_SUBST(mpi_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI include directory)
AC_ARG_WITH(mpi_inc_dir,
 [  --with-mpi-inc-dir=dir            Include directory of MPI (default=MPI_DIR/include)],
    mpi_inc_dir="${withval}", mpi_inc_dir="")
    if test "x$mpi_inc_dir" = "x" ; then
      mpi_inc_dir=${mpi_dir}/include
    fi
    AC_MSG_RESULT(${mpi_inc_dir})
    AC_SUBST(mpi_inc_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI lib directory)
AC_ARG_WITH(mpi_lib_dir,
 [  --with-mpi-lib-dir=dir            Library directory of MPI (default=MPI_DIR/lib)],
    mpi_lib_dir="${withval}", mpi_lib_dir="")
    if test "x$mpi_lib_dir" = "x" ; then
      mpi_lib_dir=${mpi_dir}/lib
    fi
    AC_MSG_RESULT(${mpi_lib_dir})
    AC_SUBST(mpi_lib_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI binary directory)
AC_ARG_WITH(mpi_bin_dir,
 [  --with-mpi-bin-dir=dir            Bin directory of MPI (default=MPI_DIR/bin) ],
    mpi_bin_dir="${withval}", mpi_bin_dir="")
    if test "x$mpi_bin_dir" = "x" ; then
      mpi_bin_dir=${mpi_dir}/bin
    fi
    AC_MSG_RESULT(${mpi_bin_dir})
    AC_SUBST(mpi_bin_dir)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI C compiler wrapper)
AC_ARG_WITH(mpi_cc,
 [  --with-mpi-cc=mpicc               MPI C compiler wrapper (default=mpicc) ],
    mpi_cc="${withval}", mpi_cc="mpicc")
    AC_MSG_RESULT(${mpi_cc})
    AC_SUBST(mpi_cc)
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for MPI Fortran 90 compiler wrapper)
AC_ARG_WITH(mpi_f90,
 [  --with-mpi-f90=mpif90             MPI f90 compiler wrapper (default=mpif90) ],
    mpi_f90="${withval}", mpi_f90="mpif90")
    AC_MSG_RESULT(${mpi_f90})
    AC_SUBST(mpi_f90)
dnl ==================================================	

AC_ARG_ENABLE(papi,
[  --enable-papi       enable the usage of papi (default=no)],
[test "$enableval" = yes && ADCL_PAPI=yes])
test "$ADCL_PAPI" = yes || ADCL_PAPI=no

AC_MSG_CHECKING([whether to enable the usage of papi])
AC_MSG_RESULT(${ADCL_PAPI})

if test "$ADCL_PAPI" = "yes" ; then 
   AC_DEFINE(ADCL_PAPI)

dnl ==================================================
  AC_MSG_CHECKING(for PAPI main directory)
  AC_ARG_WITH(papi_dir,
  [  --with-papi-dir=PAPIDIR           Main PAPI directory (default=$PWD)],
    papi_dir="${withval}", papi_dir="")
    if test "x$papi_dir" = "x" ; then 
       papi_dir=$PWD
       adcl_papi_o=""
       adcl_Papi_o=""
    else
       adcl_papi_o="ADCL_papi.o"
       adcl_Papi_o="ADCL_Papi.o"	       
    fi
    AC_MSG_RESULT(${papi_dir})
  dnl ==================================================	
  dnl ==================================================
AC_MSG_CHECKING(for PAPI include directory)
AC_ARG_WITH(papi_inc_dir,
 [  --with-papi-inc-dir=ADCLDIR       PAPI include directory (default=PAPI_DIR/include)],
    papi_inc_dir="${withval}", papi_inc_dir="")
    if test "x$papi_inc_dir" = "x" ; then 
       papi_inc_dir=${papi_dir}/include
    fi
    AC_MSG_RESULT(${papi_inc_dir})
dnl ==================================================	
dnl ==================================================
AC_MSG_CHECKING(for PAPI lib directory)
AC_ARG_WITH(papi_lib_dir,
 [  --with-papi-lib-dir=dir           PAPI lib directory (default=PAPI_DIR/lib)],
    papi_lib_dir="${withval}", papi_lib_dir="")
    if test "x$papi_lib_dir" = "x" ; then 
       papi_lib_dir=${papi_dir}/lib
    fi
    AC_MSG_RESULT(${papi_lib_dir})
dnl ==================================================	
dnl ==================================================
AC_MSG_CHECKING(for PAPI binary directory)
AC_ARG_WITH(papi_bin_dir,
 [  --with-papi-bin-dir=dir           PAPI bin directory (default=PAPI_DIR/bin)],
    papi_bin_dir="${withval}", papi_bin_dir="")
    if test "x$papi_bin_dir" = "x" ; then 
       papi_bin_dir=${papi_dir}/bin
    fi
    AC_MSG_RESULT(${papi_bin_dir})
dnl ==================================================	

dnl ==================================================
AC_MSG_CHECKING(for name of the PAPI library)
AC_ARG_WITH(papi_lib_name,
 [  --with-papi-lib-name=name         name of the PAPI library (default=papi)],
    papi_lib_name="${withval}", papi_lib_name="")
    if test "x$papi_lib_name" = "x" ; then 
       papi_lib_name="papi"
    fi
    AC_MSG_RESULT(${papi_lib_name})
dnl ==================================================	

   adcl_papi_inc_flag="-I${papi_inc_dir}"
   adcl_papi_ld_flag="-L${papi_lib_dir} -l${papi_lib_name}"

fi

AC_SUBST(adcl_papi_inc_flag)
AC_SUBST(adcl_papi_ld_flag)
AC_SUBST(adcl_papi_o)
AC_SUBST(adcl_Papi_o)

dnl ==================================================
dnl Try to compile a trivial C MPI application
AC_MSG_CHECKING(if we can compile and link a simple MPI program with ${mpi_cc})
cat > testmpi.c <<EOF
#include "mpi.h"

int main (int argc, char **argv)
{
    MPI_Init (&argc, &argv);
    MPI_Finalize();
}
EOF

$mpi_cc -o testmpi testmpi.c > /dev/null 2>&1
if test ! -s testmpi ; then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([cannot compile and link a simple MPI program with ${mpi_cc}])
else
   AC_MSG_RESULT(yes)
fi
/bin/rm -f testmpi.c testmpi testmpi.o

dnl ==================================================

dnl ==================================================
dnl Test MPI_Type_create_subarray in MPI library
AC_MSG_CHECKING(if MPI library supports sub-array datatype constructor)
cat >  TestCreateSubarray.c <<EOF
#include <mpi.h>
int main(int argc, char **argv)
{
    int	gsizes=1, lsizes=1, start_indices=0;
    MPI_Datatype newtype;

    MPI_Type_create_subarray(1, &gsizes, &lsizes, &start_indices,
                             MPI_ORDER_C, MPI_FLOAT, &newtype);    
    return MPI_SUCCESS;
}
EOF

$mpi_cc -Wall -o TestCreateSubarray TestCreateSubarray.c > /dev/null 2>&1
if test ! -s TestCreateSubarray; then
    AC_MSG_RESULT(no)
else
   AC_MSG_RESULT(yes)
   MPI_SUBARRAY=1
   AC_DEFINE(MPI_SUBARRAY)
fi
/bin/rm -f TestCreateSubarray TestCreateSubarray.* TestCreateSubarray.c
dnl ==================================================

AC_ARG_ENABLE(onesided,
[  --enable-onesided       enable the usage of one-sided communication (default=no)],
[test "$enableval" = yes && ADCL_ONESIDED=yes])
test "$ADCL_ONESIDED" = yes || ADCL_ONESIDED=no

AC_MSG_CHECKING([whether to enable the usage of one-sided communciation])
AC_MSG_RESULT(${ADCL_ONESIDED})

dnl ==================================================

dnl ==================================================
dnl only check for MPI_Win_create and friends if the user enabled the usage of one-sided operations */
if test "$ADCL_ONESIDED" = "yes" ; then 

dnl ==================================================
dnl Test MPI_Win_create in MPI library

AC_MSG_CHECKING(if MPI library supports window objects)
cat >  TestWinCreate.c <<EOF
#include <mpi.h>
int main(int argc, char **argv)
{
    int sum;
    MPI_Win sum_win;
    MPI_Win_create(&sum, sizeof(sum), sizeof(sum), 0, MPI_COMM_WORLD, &sum_win);
    return MPI_SUCCESS;
}
EOF

$mpi_cc -Wall -o TestWinCreate TestWinCreate.c > /dev/null 2>&1
if test ! -s TestWinCreate ; then
    AC_MSG_RESULT(no)
else
   AC_MSG_RESULT(yes)
   MPI_WIN=1
   AC_DEFINE(MPI_WIN)
fi
/bin/rm -f TestWinCreate TestWinCreate.o TestWinCreate.c 
dnl ==================================================

dnl ==================================================
if test "$MPI_WIN" = "1" ; then 
dnl ==================================================
dnl Test MPI_Win_fence put in MPI library
AC_MSG_CHECKING(if MPI library supports MPI_Win_fence with MPI_Put)
cat >  TestFencePut.c <<EOF
#include <mpi.h>
int main()
{
	int assert=0;	
	int orgaddr, orgcnt=1,rank=0,targcnt = 0;
	
	MPI_Aint tardisp=0;
	MPI_Datatype targtype;
	MPI_Win win;

	MPI_Win_fence(assert, win);
	MPI_Put(&orgaddr, orgcnt, MPI_INT, rank,
        	tardisp, targcnt, targtype,win);

	MPI_Win_fence(assert, win);

	return MPI_SUCCESS;
}
EOF

$mpi_cc -Wall -o TestFencePut TestFencePut.c > /dev/null 2>&1
if test ! -s TestFencePut; then
    AC_MSG_RESULT(no)
else
   AC_MSG_RESULT(yes)
   FENCE_PUT=1
   AC_DEFINE(FENCE_PUT)
fi
/bin/rm -f TestFencePut TestFencePut.*
dnl ==================================================
dnl ==================================================
dnl Test MPI_Win_fence get in MPI library
AC_MSG_CHECKING(if MPI library supports MPI_Win_fence with MPI_Get)
cat >  TestFenceGet.c <<EOF

#include <mpi.h>
int main()
{
	int assert=0;
	int orgaddr, orgcnt=1,tarrank=0, targcnt = 0;
	
	MPI_Aint tardisp=0;
	MPI_Datatype targtype;
	MPI_Win win;

	MPI_Win_fence(assert, win);
	MPI_Get(&orgaddr, orgcnt, MPI_INT, tarrank, tardisp, targcnt, targtype,win);

	MPI_Win_fence(assert, win);

	return MPI_SUCCESS;
}
EOF

$mpi_cc -Wall -o TestFenceGet TestFenceGet.c > /dev/null 2>&1
if test ! -s TestFenceGet; then
    AC_MSG_RESULT(no)
else
   AC_MSG_RESULT(yes)
   FENCE_GET=1
   AC_DEFINE(FENCE_GET)
fi
/bin/rm -f TestFenceGet TestFenceGet.*
dnl ==================================================



dnl ==================================================
dnl Test MPI_Win_Post_start put in MPI library
AC_MSG_CHECKING(if MPI library supports MPI_Win_post/start with MPI_Put)
cat >  TestPostPut.c <<EOF

#include <mpi.h>
int main()
{
	int orgaddr, orgcnt=1,rank=0,targcnt = 0,assert=0;

	MPI_Group group;
	MPI_Win win;
	MPI_Aint tardisp=0;
	MPI_Datatype targtype;
	
	MPI_Win_post(group, assert, win);
	MPI_Win_start(group, assert, win);

	MPI_Put(&orgaddr, orgcnt, MPI_INT, rank,tardisp, targcnt, targtype,win);


	MPI_Win_complete(win);
	MPI_Win_wait(win);

	return MPI_SUCCESS;
}
EOF

$mpi_cc -Wall -o TestPostPut TestPostPut.c > /dev/null 2>&1
if test ! -s TestPostPut; then
    AC_MSG_RESULT(no)
else
   AC_MSG_RESULT(yes)
   POSTSTART_PUT=1
   AC_DEFINE(POSTSTART_PUT)
fi
/bin/rm -f TestPostPut TestPostPut.*
dnl ==================================================

dnl ==================================================
dnl Test MPI_Win_Post_start get in MPI library
AC_MSG_CHECKING(if MPI library supports MPI_Win_post/start with MPI_Get)
cat >  TestPostGet.c <<EOF
#include <mpi.h>
int main()
{
	int orgaddr, orgcnt=1,tarrank=0,targcnt = 0,assert=0;

	MPI_Group group;
	MPI_Win win;
	MPI_Aint tardisp=0;
	MPI_Datatype targtype;
	
	MPI_Win_post(group, assert, win);
	MPI_Win_start(group, assert, win);

	MPI_Get(&orgaddr, orgcnt, MPI_INT, tarrank,tardisp, targcnt, targtype,win);


	MPI_Win_complete(win);
	MPI_Win_wait(win);

	return MPI_SUCCESS;
}
EOF

$mpi_cc -Wall -o TestPostGet TestPostGet.c > /dev/null 2>&1
if test ! -s TestPostGet; then
    AC_MSG_RESULT(no)
else
   AC_MSG_RESULT(yes)
   POSTSTART_GET=1
   AC_DEFINE(POSTSTART_GET)
fi
/bin/rm -f TestPostGet TestPostGet.*
dnl ==================================================
fi
dnl MPI_WIN ==================================================
fi 
dnl ADCL_ONESIDED ==================================================



AC_ARG_ENABLE(printf_tofile,
[  --enable-printf-tofile  dump printf statements to a file (default=no)],
[test "$enableval" = yes && ADCL_FILE_PER_PROC=yes])
test "$ADCL_FILE_PER_PROC" = yes || ADCL_FILE_PER_PROC=no

AC_MSG_CHECKING([whether to dump printf statements to a file instead of stdout])
AC_MSG_RESULT(${ADCL_FILE_PER_PROC})
if test "$ADCL_FILE_PER_PROC" = yes ; then
  AC_DEFINE(ADCL_FILE_PER_PROC)
fi


dnl ==================================================
AC_MSG_CHECKING(for number of measurements per method)
AC_ARG_WITH(num_tests,
 [  --with-num-tests=NUMTESTS    Number of measurements per method.(default=10)],
    adcl_emethod_numtests="${withval}", adcl_emethod_numtests="10")
    AC_MSG_RESULT(${adcl_emethod_numtests})
    AC_SUBST(adcl_emethod_numtests)
dnl ==================================================


dnl Checks for header files.
#AC_HEADER_STDC
#AC_CHECK_HEADERS(limits.h malloc.h sys/time.h unistd.h sys/types.h)
#AC_CHECK_FUNCS(strdup strerror strstr strtol strlcat strlcpy)

dnl Checks for typedefs, structures, and compiler characteristics.
#AC_C_CONST
#AC_TYPE_PID_T
#AC_TYPE_SIZE_T

dnl Checks for library functions.
#AC_FUNC_MEMCMP
#AC_CHECK_FUNCS(gethostname strerror strstr setlinebuf strcasecmp snprintf)

AC_OUTPUT(Makefile.defs include/ADCL_sysconfig.h src/framework/Makefile src/adcl/C/Makefile) 
